# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#image: gradle:alpine

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "trigger"
    - if: $CI_PIPELINE_SOURCE == "push"
#    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
#      when: never
    - if: $CI_COMMIT_BRANCH

variables:
  DEPLOY_TO_ENV: "test"
  PACTICIPANT: "pactflow-example-provider-java-kafka"
  PACT_BROKER_BASE_URL: "http://pactbroker.dev.gazprombank.ru:8000"
  PACT_USER: "pact"
  PACT_PASSWORD: "pact"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -DpactPublishResults=true"

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME
  
stages:          # List of stages for jobs, and their order of execution
  - getVersion
  - build
  - canIDeploy
  - deploy

getVersion-job:      
  stage: getVersion
  script:
    - export gitTag="$(git describe --tags --abbrev=0)"
    - export gitHash="$(git rev-parse --short HEAD)"
    - export gitBranch="$CI_COMMIT_REF_NAME"
    - export appVersion="$gitTag-$gitHash"
    - echo "GIT_TAG=$gitTag" >> build.env
    - echo "GIT_HASH=$gitHash" >> build.env
    - echo "GIT_BRANCH=$gitBranch" >> build.env
    - echo "APP_VERSION=$appVersion" >> build.env
  artifacts:
    reports:
      dotenv: build.env 

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Build the code..."
    - ./gradlew test -PpactBrokerUrl=$PACT_BROKER_BASE_URL -PpactBrokerUsername=$PACT_USER -PpactBrokerPassword=$PACT_PASSWORD -PpacticipantVersion=$APP_VERSION -PpacticipantBranch=$GIT_BRANCH
    - echo "Build complete."
  dependencies:
    - getVersion-job    

canIDeploy-job:       # This job runs in the build stage, which runs first.
  stage: canIDeploy
  script:
    - echo "Can I deploy?"
    - echo "$APP_VERSION"
    - ./pact/bin/pact-broker can-i-deploy --pacticipant=$PACTICIPANT --to-environment=$DEPLOY_TO_ENV --version=$APP_VERSION --retry-while-unknown=12 --broker-base-url=$PACT_BROKER_BASE_URL -u=$PACT_USER -p=$PACT_PASSWORD
    # - response=$(curl -o - -i --insecure --request GET "http://pactbroker.dev.gazprombank.ru:8000/can-i-deploy?pacticipant=$PACTICIPANT&version=$APP_VERSION&environment=$DEPLOY_TO_ENV")
    # - echo $response
    # - deploy=$(echo $response | grep -oP '(?<=\"deployable\":)\w+')
    # - echo "deploy - $deploy"
    # - if [ "$deploy" = "true" ]; then echo "you can deploy"; exit 0; else echo "you can't deploy"; exit 1; fi
  dependencies:
    - getVersion-job
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - ./pact/bin/pact-broker record-deployment --pacticipant=$PACTICIPANT --version=$APP_VERSION --environment=$DEPLOY_TO_ENV --broker-base-url=$PACT_BROKER_BASE_URL -u=$PACT_USER -p=$PACT_PASSWORD
    # - |
    #   curl -u pact_workshop:pact_workshop -X PUT -i -H "Content-Type: application/json" -H "Accept: application/hal+json, application/json, */*; q=0.01" -H "X-Interface: HAL Browser" http://pactbroker.dev.gazprombank.ru:8000/pacticipants/$PACTICIPANT/versions/$APP_VERSION/tags/$DEPLOY_TO_ENV
    - echo "Application successfully deployed."
  dependencies:
    - getVersion-job
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never  
    - if: $CI_COMMIT_BRANCH == "master"
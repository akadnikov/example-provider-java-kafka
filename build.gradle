plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
  id "au.com.dius.pact" version "4.1.7"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '16'

repositories {
	mavenCentral()
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'au.com.dius.pact.provider:junit5:4.3.11'
	testImplementation 'au.com.dius.pact.provider:spring:4.3.11'
	runtimeOnly 'com.h2database:h2'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	implementation ('com.github.javafaker:javafaker:1.0.2') { exclude module: 'org.yaml' }
	implementation group: 'org.yaml', name: 'snakeyaml', version: '1.20'
}

def getGitHash = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--short', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def getGitBranch = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

test {
	useJUnitPlatform()
//jvmArgs = ["-Xms128m", "-Xmx128m","-XX:+HeapDumpOnOutOfMemoryError"]

	if (System.getProperty('pactPublishResults') == 'true') {
		systemProperty 'pact.provider.version', project.getProperties().getOrDefault("pacticipantVersion", "v" + version + "-" + getGitHash())
		systemProperty 'pact.provider.branch', project.getProperties().getOrDefault("pacticipantBranch", getGitBranch())
		systemProperty 'pact.verifier.publishResults', 'true'
	}
	systemProperty 'pactbroker.url', "${pactBrokerUrl}"
	systemProperty 'pactbroker.auth.username', "${pactBrokerUsername}"
	systemProperty 'pactbroker.auth.password', "${pactBrokerPassword}"

}

//pact {
//
//    broker {
//        pactBrokerUrl = System.getenv('PACT_BROKER_BASE_URL')
//        pactBrokerToken = System.getenv('PACT_BROKER_TOKEN')
//    }
//
//    serviceProviders {
//			"pactflow-example-provider" {
// 				fromPactBroker {
//        	selectors = latestTags('master') // specify your tags here. You can leave this out to just use the latest pacts
//      	}
//			}
//    }
//}